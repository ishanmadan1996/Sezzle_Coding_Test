{"version":3,"sources":["components/CalcProvider.js","components/styles/Styles.js","components/EqualButton.js","components/NumberButton.js","components/FunctionButton.js","components/ClearButton.js","components/Display.js","components/BackButton.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalcContext","createContext","initialState","socket","reducer","state","action","payload","msg","messages","type","sendChatAction","value","emit","CalcProvider","props","useState","number","setNumber","React","useReducer","localData","localStorage","getItem","JSON","parse","allCalculations","dispatch","useEffect","setItem","stringify","io","on","handleSetDisplayValue","num","includes","length","replace","handleClearValue","handleBackButton","deletedNumber","slice","calculate","String","eval","useLocalState","localItem","local","setState","newItem","Provider","children","className","map","message","i","key","CalculatorStyles","styled","div","DisplayStyles","CalcMessageStyles","EqualButton","useContext","onClick","e","preventDefault","CalculatorButton","buttonValue","FunctionButton","ClearButton","Display","BackButton","Calculator","NumberButton","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45e65e12.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { CalcMessageStyles } from './styles/Styles';\r\n\r\nexport const CalcContext = createContext();\r\n\r\nconst initialState = [];\r\n\r\nfunction reducer(state, action) {\r\n    const { msg, messages } = action.payload;\r\n    switch(action.type) {\r\n        case 'RECEIVE_MESSAGE':\r\n            return ([{msg}, ...state])\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nlet socket;\r\n\r\nconst sendChatAction = (value) => {\r\n    socket.emit('chat message', value);\r\n}\r\n\r\nconst CalcProvider = props => {\r\n\r\n    const [number, setNumber] = useState('');\r\n\r\n    // reducer checks for local storage\r\n    const [allCalculations, dispatch] = React.useReducer(reducer, initialState, () => {\r\n        const localData = localStorage.getItem(\"allCalculations\");\r\n        return localData ? JSON.parse(localData) : [];\r\n    });\r\n\r\n    // employing useEffect hook to add to local storage\r\n    useEffect(() => {\r\n        localStorage.setItem(\"allCalculations\", JSON.stringify(allCalculations))\r\n    }, [allCalculations]);\r\n\r\n    if(!socket) {\r\n        socket = io(':3001');\r\n        socket.on('chat message', function(msg){\r\n            dispatch({type: 'RECEIVE_MESSAGE', payload: msg})\r\n        });\r\n    }\r\n\r\n    // takes care of displaying the digit clicked\r\n    const handleSetDisplayValue = num => {\r\n        if ((!number.includes('.') || num !== '.') && number.length < 16) {\r\n            setNumber(`${(number + num).replace(/^0+/, '')}`);\r\n        }\r\n    };\r\n\r\n    // resets calculator\r\n    const handleClearValue = ()  => {\r\n        setNumber('');\r\n    };\r\n\r\n    // allows deletion of character input, one by one\r\n    const handleBackButton = () => {\r\n        if(number !== '') {\r\n            const deletedNumber = number.slice(0, number.length - 1);\r\n            setNumber(deletedNumber);\r\n        };\r\n    }\r\n\r\n    // creates calculation string, calculates total\r\n    const calculate = () => {\r\n        setNumber(String(eval(number)));\r\n        handleClearValue();\r\n    };\r\n\r\n    // custom hook; takes care of storing calculations locally between sessions\r\n    function useLocalState(localItem) {\r\n        \r\n        const [local, setState] = useState(localStorage.getItem(localItem));\r\n\r\n        function setLocal(newItem) {\r\n            localStorage.setItem(localItem, newItem);\r\n            setState(newItem);\r\n        }\r\n        return [local, setLocal];\r\n    }\r\n\r\n    return (\r\n        <CalcContext.Provider\r\n            value={{\r\n                allCalculations,\r\n                calculate,\r\n                handleBackButton,\r\n                handleClearValue,\r\n                handleSetDisplayValue,\r\n                number,\r\n                sendChatAction,\r\n                setNumber\r\n            }}\r\n        >\r\n            {props.children}\r\n        <CalcMessageStyles>\r\n            <div className=\"messagesWrapper\">\r\n                {allCalculations.slice(0,10).map((message, i) => (\r\n                    <div className=\"calcMessage\" value={message.msg} key={i}>\r\n                        {message.msg}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </CalcMessageStyles>\r\n        </CalcContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CalcProvider;","import styled from 'styled-components';\r\n\r\nexport const CalculatorStyles = styled.div`\r\n  box-sizing: border-box;\r\n  background-color: black;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  display: grid;\r\n  justify-items: center;\r\n  grid-template-rows: minmax(200px 350px) 1fr;\r\n  grid-template-columns: 1fr;\r\n  @media (max-width: 500px) {\r\n    max-width: 100%;\r\n    padding: 5%;\r\n    overflow-x: hidden;\r\n  }\r\n  .display {\r\n    /* grid-area: display; */\r\n    font-family: 'Menlo', 'Monaco', monospace;\r\n    margin: 0 !important;\r\n    // width: 100%;\r\n    margin-right: 10px\r\n    @media (max-width: 500px) {\r\n      width: 100%;\r\n      max-height: 200px;\r\n    }\r\n    h1 {\r\n      font-size: 4rem;\r\n      color: white;\r\n      text-align: center;\r\n      @media (max-width: 500px) {\r\n        font-size: 2rem;\r\n      }\r\n    }\r\n  }\r\n  .number-pad {\r\n    /* grid-area: numbers; */\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    padding: 0px 0px 30px;\r\n    width: 450px;\r\n    margin: 0 auto;\r\n    border: white solid;\r\n    border-radius: 20px;\r\n    padding: 20px 20px 20px 20px;\r\n    margin-bottom: 20px;\r\n    @media (max-width: 500px) {\r\n      width: 100%;\r\n      margin: 0;\r\n    }\r\n    button {\r\n      width: 100%;\r\n      height: 80px;\r\n      border-radius: 20px;\r\n      border: 3px solid white;\r\n      font-size: 2rem;\r\n      color: white;\r\n      font-family: 'Menlo', 'Monaco', monospace;\r\n      background: black;\r\n      &:focus {\r\n        outline: none;\r\n      }\r\n      &:hover {\r\n        border: black solid;\r\n        filter: invert(100%);\r\n      }\r\n    }\r\n    button.function-button {\r\n      background-color: #333;\r\n    }\r\n    button.white-button {\r\n      color: #333;\r\n      background-color: white;\r\n    }\r\n    button.clear-button {\r\n      grid-column: 1/3;\r\n    }\r\n  }\r\n  .zero-button {\r\n    grid-column: 1/3;\r\n  }\r\n`;\r\n\r\nexport const DisplayStyles = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 90px 50px;\r\n  grid-template-columns: 1fr;\r\n  border: 4px solid white;\r\n  max-width: 700px;\r\n  margin: 10px auto;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  background: black;\r\n  @media (max-width: 500px) {\r\n    width: 95%;\r\n    grid-template-rows: 60px 40px;\r\n  }\r\n  h2,\r\n  p {\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n  h2 {\r\n    font-size: 2.5rem;\r\n    margin: 0;\r\n    text-align: right;\r\n    padding: 15px 20px;\r\n    @media (max-width: 500px) {\r\n      font-size: 2rem;\r\n      padding: 10px;\r\n      padding-top: 3rem;\r\n    }\r\n  }\r\n  h2.long-main-display {\r\n    font-size: 1.2rem;\r\n  }\r\n  p {\r\n    margin: 5px 0;\r\n    font-size: 1.3rem;\r\n    @media (max-width: 500px) {\r\n      font-size: 0.8rem;\r\n    }\r\n  }\r\n  p.long-stored-display {\r\n    font-size: 0.5rem;\r\n  }\r\n`;\r\n\r\nexport const CalcMessageStyles = styled.div`\r\n  .messagesWrapper {\r\n    overflow-x: hidden;\r\n  }\r\n  .calcMessage {\r\n    width: 100%;\r\n    height: 50px;\r\n    padding: 20px 0 0 20px;\r\n    text-align: left;\r\n    color: white;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    font-family: 'Menlo', 'Monaco', monospace;\r\n    border-top: 1px white solid;\r\n    background-color: black;\r\n    @media (max-width: 500px) {\r\n      width: 100%;\r\n      max-height: 200px;\r\n    }\r\n  }\r\n`;","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\n\r\nconst EqualButton = () => {\r\n  const { calculate, number, sendChatAction } = useContext(CalcContext);\r\n\r\n  return (\r\n    <button\r\n      className=\"white-button\"\r\n      type=\"submit\"\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        calculate();\r\n        sendChatAction({msg: String(number + \" = \" + eval(number))});\r\n      }}\r\n    >\r\n      =\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EqualButton;\r\n","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\n\r\nconst CalculatorButton = ({ buttonValue }) => {\r\n  const { handleSetDisplayValue } = useContext(CalcContext);\r\n  return (\r\n    <button type=\"button\" onClick={() => handleSetDisplayValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CalculatorButton;\r\n","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\n\r\nconst FunctionButton = ({ buttonValue }) => {\r\n  const { handleSetDisplayValue } = useContext(CalcContext);\r\n  return (\r\n    <button className=\"function-button\" type=\"button\" onClick={() => handleSetDisplayValue(buttonValue)}>\r\n      {buttonValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FunctionButton;\r\n","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\n\r\nconst ClearButton = () => {\r\n  const { handleClearValue } = useContext(CalcContext);\r\n  return (\r\n    <button type=\"button\" className=\"white-button clear-button\" onClick={() => handleClearValue()}>\r\n      AC\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ClearButton;\r\n","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\nimport { DisplayStyles } from './styles/Styles';\r\n\r\nconst Display = () => {\r\n  const { number } = useContext(CalcContext);\r\n  return (\r\n    <DisplayStyles>\r\n      <h2>\r\n        {!number.length ? '0' : number}\r\n      </h2>\r\n    </DisplayStyles>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React, { useContext } from 'react';\r\nimport { CalcContext } from './CalcProvider';\r\n\r\nconst BackButton = () => {\r\n  const { handleBackButton } = useContext(CalcContext);\r\n  return (\r\n    <button type=\"button\" className=\"white-button\" onClick={() => handleBackButton()}>\r\n      &#8592;\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import React from 'react';\r\nimport NumberButton from './NumberButton';\r\nimport FunctionButton from './FunctionButton';\r\nimport ClearButton from './ClearButton';\r\nimport Display from './Display';\r\nimport EqualButton from './EqualButton';\r\nimport BackButton from './BackButton';\r\nimport { CalculatorStyles } from './styles/Styles';\r\n\r\nconst Calculator = () => (\r\n  <CalculatorStyles>\r\n    <div className=\"display\">\r\n      <h1>SEZZLE CALC</h1>\r\n      <Display />\r\n    </div>\r\n    <div className=\"number-pad\">\r\n      <ClearButton />\r\n      <BackButton />\r\n      <FunctionButton buttonValue=\"/\" />\r\n      <NumberButton buttonValue={7} />\r\n      <NumberButton buttonValue={8} />\r\n      <NumberButton buttonValue={9} />\r\n      <FunctionButton buttonValue=\"*\" />\r\n      <NumberButton buttonValue={4} />\r\n      <NumberButton buttonValue={5} />\r\n      <NumberButton buttonValue={6} />\r\n      <FunctionButton buttonValue=\"-\" />\r\n      <NumberButton buttonValue={1} />\r\n      <NumberButton buttonValue={2} />\r\n      <NumberButton buttonValue={3} />\r\n      <FunctionButton buttonValue=\"+\" />\r\n      <div className=\"zero-button\">\r\n        <NumberButton buttonValue={0} />\r\n      </div>\r\n      <NumberButton buttonValue=\".\" />\r\n      <EqualButton />\r\n    </div>\r\n  </CalculatorStyles>\r\n);\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\nimport Calculator from './components/Calculator';\r\nimport CalcProvider from './components/CalcProvider';\r\n\r\n\r\nfunction App() {\r\n\r\n    return(\r\n        <CalcProvider>\r\n            <Calculator />\r\n        </CalcProvider>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n// import './App.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}